//file:noinspection UnnecessaryQualifiedReference
//file:noinspection GroovyAssignabilityCheck

plugins {
    id "dev.architectury.architectury-pack200" version "0.1.3"
    id "com.github.johnrengelman.shadow" version "7.1.0"
    id "cc.woverflow.loom" version "0.10.6"
    id "net.kyori.blossom" version "1.3.0"
    id "java"
}

version = mod_version
group = "io.polyfrost"
archivesBaseName = mod_name

blossom {
    String className = "src/main/java/io/polyfrost/oneconfig/OneConfig.java"
    replaceToken("@VER@", project.version, className)
    replaceToken("@NAME@", mod_name, className)
    replaceToken("@ID@", mod_id, className)
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

loom {
    launchConfigs {
        client {

        }
    }
    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }
    forge {
        pack200Provider = new dev.architectury.pack200.java.Pack200Adapter()
    }
}

configurations {
    include
    implementation.extendsFrom(include)
}

repositories {
    maven { url 'https://repo.woverflow.cc/' }
}

dependencies {
    minecraft("com.mojang:minecraft:1.8.9")
    mappings("de.oceanlabs.mcp:mcp_stable:22-1.8.9")
    forge("net.minecraftforge:forge:1.8.9-11.15.1.2318-1.8.9")
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "name", mod_name
    inputs.property "id", mod_id

    filesMatching("mcmod.info") {
        expand(
                "id": mod_id,
                "name": mod_name,
                "version": version
        )
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

sourceSets {
    main {
        output.resourcesDir = java.classesDirectory
    }
}

remapJar {
    archiveClassifier = "nodeps"
}

jar {
    manifest.attributes(
            'ModSide': 'CLIENT',
            'ForceLoadAsMod': true,
            "TweakOrder": "0"
    )
}

shadowJar {
    archiveClassifier.set('')
    from(remapJar.archiveFile)
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}
assemble.dependsOn shadowJar